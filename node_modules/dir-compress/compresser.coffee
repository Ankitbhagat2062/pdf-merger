path = require('path')
async = require('async')
_ = require('lodash')
uglify = require('uglify-js')
fs = require('fs-extra')

module.exports = {
	compress: (options)->
		if options.rootPath
			rootPath = options.rootPath
			newRootPath = newRootPath or path.join(path.dirname(rootPath), '_' + path.basename(rootPath))
			options.rootPath = newRootPath
			delete options.newRootPath
			
			if fs.existsSync(newRootPath)
				console.log '目标文件夹已经存在'
			else
				fs.copySync(rootPath, newRootPath)

			count = 0
			jsArr = walk(options)
			
			async.whilst(
				()->
					return count < jsArr.length
				(cb)->
					jsPath = jsArr[count]
					minify(jsPath, (err, data)->
						if !err
							fs.writeFile(jsPath, data, (err)->
								if err
									throw err
								else
									cb(null)
							)
						else
							console.log(jsPath, ',has sth wrong')
							console.log 'try to add the folder to exclude'
							throw err
					)
					count++
				(err, result)->
					console.log 'finish compress'
			)
		else
			console.log '参数错误'
}


minify = (pathName, callback)->
	try 
		result = uglify.minify(pathName, {
			# warnings: true,
			mangle: true
		})
		callback(null, result.code)
	catch err
		callback(err)

walk = (options)->
	output = []
	directories = []

	rootPath = options.rootPath
	include = options.include or /(.*)\.js$/
	exclude = options.exclude or /node_modules/g
	removePath = options.removePath
	removeFile = options.removeFile or /(.*)\.coffee$/
	removeDir = options.removeDir or /node_modules/g

	_.each(fs.readdirSync(rootPath), (file, index)->
		newRootPath = path.join(rootPath, file)
		stat = fs.statSync(newRootPath)
		if stat.isFile()
			if include.test(file) and (!exclude or !exclude.test(file))
				output.push(newRootPath.replace(removePath, ''))
			if removeFile.test(file)
				removeFilePath = path.join(rootPath, file)
				fs.removeSync(removeFilePath)
		else if stat.isDirectory()
			if removeDir.test(file)
				removeDirPath = path.join(rootPath, file)
				fs.removeSync(removeDirPath)
			if !exclude or !exclude.test(file)		
				directories.push(newRootPath)
	)
	_.each(directories, (dir, index)->
		options.rootPath = dir
		output = output.concat(walk(options))
	)
	return output


