// Generated by CoffeeScript 1.7.1
var async, fs, minify, path, uglify, walk, _;

path = require('path');

async = require('async');

_ = require('lodash');

uglify = require('uglify-js');

fs = require('fs-extra');

module.exports = {
  compress: function(options) {
    var count, jsArr, newRootPath, rootPath;
    if (options.rootPath) {
      rootPath = options.rootPath;
      newRootPath = newRootPath || path.join(path.dirname(rootPath), '_' + path.basename(rootPath));
      options.rootPath = newRootPath;
      delete options.newRootPath;
      if (fs.existsSync(newRootPath)) {
        console.log('目标文件夹已经存在');
      } else {
        fs.copySync(rootPath, newRootPath);
      }
      count = 0;
      jsArr = walk(options);
      return async.whilst(function() {
        return count < jsArr.length;
      }, function(cb) {
        var jsPath;
        jsPath = jsArr[count];
        minify(jsPath, function(err, data) {
          if (!err) {
            return fs.writeFile(jsPath, data, function(err) {
              if (err) {
                throw err;
              } else {
                return cb(null);
              }
            });
          } else {
            console.log(jsPath, ',has sth wrong');
            console.log('try to add the folder to exclude');
            throw err;
          }
        });
        return count++;
      }, function(err, result) {
        return console.log('finish compress');
      });
    } else {
      return console.log('参数错误');
    }
  }
};

minify = function(pathName, callback) {
  var err, result;
  try {
    result = uglify.minify(pathName, {
      mangle: true
    });
    return callback(null, result.code);
  } catch (_error) {
    err = _error;
    return callback(err);
  }
};

walk = function(options) {
  var directories, exclude, include, output, removeDir, removeFile, removePath, rootPath;
  output = [];
  directories = [];
  rootPath = options.rootPath;
  include = options.include || /(.*)\.js$/;
  exclude = options.exclude || /node_modules/g;
  removePath = options.removePath;
  removeFile = options.removeFile || /(.*)\.coffee$/;
  removeDir = options.removeDir || /node_modules/g;
  _.each(fs.readdirSync(rootPath), function(file, index) {
    var newRootPath, removeDirPath, removeFilePath, stat;
    newRootPath = path.join(rootPath, file);
    stat = fs.statSync(newRootPath);
    if (stat.isFile()) {
      if (include.test(file) && (!exclude || !exclude.test(file))) {
        output.push(newRootPath.replace(removePath, ''));
      }
      if (removeFile.test(file)) {
        removeFilePath = path.join(rootPath, file);
        return fs.removeSync(removeFilePath);
      }
    } else if (stat.isDirectory()) {
      if (removeDir.test(file)) {
        removeDirPath = path.join(rootPath, file);
        fs.removeSync(removeDirPath);
      }
      if (!exclude || !exclude.test(file)) {
        return directories.push(newRootPath);
      }
    }
  });
  _.each(directories, function(dir, index) {
    options.rootPath = dir;
    return output = output.concat(walk(options));
  });
  return output;
};
